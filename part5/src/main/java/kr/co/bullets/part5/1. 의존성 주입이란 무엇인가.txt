* 의존성 주입(DI)이란 무엇인가?
    - 객체 인스턴스의 생성을 직접하지 않고 (다른 곳에서 만들어져서) 필요한 곳에 전달(전달되는 곳을 따로 있음)되도록 코드를 조직화(일관된 방법으로 만드는 방법이 정의됨)하는 기법
    - 객체 인스턴스를 사용하는 곳을 클라이언트(client)라고 부름, 객체 인스턴스 자체를 서비스(Service)라고 부름
    - 의존성(a dependyncy): 사용되는 객체 인스턴스 (객체 인스턴스 그 자체를 의미하는 용어)
    - 클라이언트가 아닌, 잘 조직화 된 곳에서 일관성 있는 형태로 객체 생성 방법을 정의함

    [기존]
    class NewsRemoteDataSource {
        private val newsApi: NewsApi = ProdNewsApi()
    }

    [DI 적용, Pseudocode]
    class NewsRemoteDataSource(private val newsApi: NewsApi) {

    }

* 왜 의존성 주입을 사용해야 하는가?
    - 코드를 재사용 가능하게 한다
    - 클라이언트 코드의 변경이 없어도 손쉽게 다른 형태의 DataSource 인스턴스를 만들 수 있다
    - 객체의 생성 과정이 바뀌더라도 클라이언트 코드에 영향을 주지 않음
      (예: 파라미터의 변경)

    [DI 적용, Pseudocode]
    val prodNewsRemoteDataSource = NewsRemoteDataSource(ProdNewsApi())

    val devNewsRemoteDataSource = NewsRemoteDataSource(DevNewsApi())

    - 클라이언트는 interface로만 객체를 알고 있으면 되므로, 보다 나은 설계를 가능하게 한다
      V 보다 추상화를 잘 할 수 있게 해줌
      V 멀티모듈에서 모듈별 의존성을 떼어내는 데에 매우 유용
    - 코드를 테스트 가능하게 한다
    - 객체의 생성 방법을 설정에 따라 다르게 할 수 있음
      프로덕션을 위한 구현을 테스트용으로 간단하게 전환 가

    [기존]
    class NewsRemoteDataSource {
        private val newsApi: NewsApi = when (BuildConfig.type()) {
            PROD -> ProdNewsApi()
            TEST -> FakeNewsApi()
        }
    }

    [DI 적용, Pseudocode]
    val fakeNewsRemoteDataSource = NewsRemoteDataSource(FakeNewsApi())

    Injector 클래스
    - Injector (혹은 Container) 클래스는 주입되는 모든 타입들을 위한 생성 방법을 정의함 (실제로 각 객체에 대한 생성이 일어남)
    - 각 객체들 사이의 관계가 정의됨

    class ProdInjector {
        fun getNewsApi(): NewsApi = ProdNewsApi()
        fun getNewsRemoteDataSource(): NewsRemoteDataSource = NewsRemoteDataSource(getNewsApi())
    }

* 왜 의존성 주입 프레임워크를 써야 하는가?
    V 의존성 주입 과정에서 많은 양의 보일러 플레이트 코드가 필요함
    V Injector 클래스를 유지보수 하는 것은 프로젝트가 커지면 커질 수록 힘듦
    V 앱 빌드의 설정에 따라 다른 종류의 Injector를 구현하는 것은 상당히 많은 양의 코드 중복을 만듦
    V DI 프레임워크가 없으면, Injector 클래스가 역설적으로 확장을 어렵게 만들 수 있음 (분리가 어렵기 때문)
    V DI 프레임워크들은 멀티모듈을 쉽게 해줌
    V DI 프레임워크는 보통 의존성 정의를 위한 여러 단계의 계층을 제공함
      -> 의존성 정의를 쉽게 유지보수하고 더 작은 단위로 쪼갤 수도 있음

* 어떤 의존성 주입 프레임워크를 선택할 것인가?
    - ServiceLocator 패턴: 의존성 주입이 없이도 최소한의 바인딩 정의만 제공하는 패턴
      Service: 주입의 대상이 되는 클래스 원형
      반대로 주입을 받는 곳 예를 들면 Activity, ViewModel를 클라이언트라고 부를 수 있음
    - 전역적으로 관리해야 할 클래스들이 아주 복잡하지 않다면? 아래의 기준만 충족해도 훌륭한 추상화가 가능
      V 일관된 바인딩 정의를 제공할 수 있는 저장소 (== ServiceLocator)가 잘 구현되어 있어야 함
      V 바인딩 정의가 분산 가능해야 함 (멀티모듈을 위해)
        좋은 예: ServiceLocator가 자식 SL(ServiceLocator)을 갖는 트리 구조
      V 현재 상태에서 가장 유효한 Context를 정확히 저장하고 있어야 함
      V 굳이 전역적으로 정의할 필요가 없는 생성 로직들을 위해 표준화된 Factory 구조를 별도로 정의
    - 사용자 정의 구현
    - Koin

    - ServiceLocator의 예

    val container = Container(context)
    container
        .bind(Foo1::class, FooImpl1())
        .bind(Foo2::class, FooImpl2())
        .bind(Foo3::class, FooImpl3())

    // in client
    val foo = container.get(Foo1::class)

    // in another place
    val childContainer = Container(context, parent = container)
    childContainer.bind(Bar::class, BarImpl())

    val foo2 = childContainer.get(Foo2::class)
    val bar = childContainer.get(Bar::class)

    - JSR-330 표준 프레임워크: Dagger
      + Hilt
      + Anvil
    - DI 프레임워크는 어떻게 코드를 빌드해야 하는가에 영향을 미침
    - 어떤 DI 프레임워크를 선택하는가에 따라, 어떤 공유 라이브러리와 호환 가능한가에 큰 영향을 미침
    - 그 외에도..
      V 내 앱의 계층 구조에 적합한가?
      V 복잡한 async lazy 처리가 가능한가?
      V 컴파일 시에 설정 오류를 잡아낼 수 있는가? (Koin <-> Hilt)
      V Kotlin 언어 및 Jetpack Compose로 인한 고려사항
      V 빌드 속도
    - 자세한 건 마지막 시간에..
