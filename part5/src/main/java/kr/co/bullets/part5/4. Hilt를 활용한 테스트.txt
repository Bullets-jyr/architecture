* 수동 의존성 주입으로 테스트하기
    - 의존성 주입을 사용하지 않는다면, 생성자를 직접 호출해야 함

    val newsRemoteDataSource = NewsRemoteDataSource()

    - 하지만, 실제 프로젝트에서는 의존 관계가 복잡함
    - 많은 양의 설정
      V 캡슐화가 깨질 우려
      V 단순히 의존성 체인을 끊지 않기 위해서 mock으로 손쉽게 해결하고자 하는 유혹
      V 실수하기 쉬움 (eg. 스코프 설정, null 처리, provider / lazy)
      V 깨지기 쉬운(brittle)테스트 유발 (eg. 매개변수의 순서 변경이 테스트에 영향을 미침)

    val newsRemoteDataSource = NewsRemoteDataSource(
        remoteDataSource = NewsRemoteDataSource(...), // network
        localDataSource = NewsLocalDataSource(...) // database
    )

* Dagger로 테스트하기
    - Dagger를 사용하면 수동 주입이 생기는 이슈를 일부 해결 가능
    - 각 테스트 스위트는 각자의 컴포넌트 집합을 갖고 있어야 할 필요가 있음
      -> 이런 코드가 늘면서 오히려 수동 주입보다 더 많은 양의 보일러플레이트 코드를 요구하게 됨

    @Component(modules=[FakeNewsModule::class, ...])
    interface FooTestApplicationComponent { ... }
    @Component(modules=[FakeClickModule::class, ...])
    interface FooTestActivityComponent { ... }
    @Component(modules=[FakeAuthModule::class, ...])
    interface BarTestApplicationComponent { ... }
    @Component(modules=[FakeViewModule::class, ...])
    interface BarTestActivityComponent { ... }

* Hilt로 테스트하기
    - Hilt는 각 테스트 별로 컴포넌트를 생성해서 Dagger가 쉽게 사용되도록 함

* 바인딩 주입
    - SingletonComponent 바인딩에 접근하기 위해서 @Inject를 필드에 추가

* 바인딩 정의
    - 테스트를 위해서 바인딩을 직접 정의하려면, @BindValue 필드 혹은 중첩된 @Module을 사용

* 모듈 교체
    - 테스트에 사용되는 모듈만 바인딩 가능

* Hilt Test 정리

